# -*- coding: utf-8 -*-
"""DataWraggling.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18C98-ERdkYF3drEegIBqt88g7p55_Oei
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
df = pd.read_csv("medical_students_dataset.csv")

print(df)

df.head()# Shows columns and sample data and it will show first 5 rows

df.tail()

df.sample(5) #view random 5 rows

df.shape

df.isnull().sum() ##  Total missing Value Per Column

import numpy as np

df.loc[11, 'Student ID']=np.nan

df.isnull().sum()

null_rows = df[df.isnull().any(axis=1)]
print(null_rows.sample(5))

df.dropna(subset=['Student ID'], inplace=True) #1. For Student ID (Unique Identifier)
#Problem: You canâ€™t impute fake IDs (would create duplicates).

df

#For Other Columns
#Use imputation based on data type:
df['Age'] = df['Age'].fillna(df['Age'].median())

df['Gender'] = df['Gender'].fillna("Unknown")

#post imputation check
print(df.isnull().sum())  # Should show 0 for handled columns
print(f"New shape: {df.shape}")  # Rows may reduce if you dropped NaN IDs

# Numeric columns: Fill with median
numeric_cols = ['Height', 'Weight', 'BMI', 'Temperature', 'Heart Rate', 'Blood Pressure', 'Cholesterol']
df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].median())

# Categorical columns: Fill with mode (most common value)
categorical_cols = ['Blood Type', 'Diabetes', 'Smoking']
for col in categorical_cols:
    df[col] = df[col].fillna(df[col].mode()[0])   # no inplace here

print(df.isnull().sum())  # Should show 0 for ALL columns
print(f"Final shape: {df.shape}")  # Rows should stay at 17,994

# Assign Temprory unique id's
# Generate temporary IDs for rows with missing 'Student ID'
missing_ids = df['Student ID'].isnull()
df.loc[missing_ids, 'Student ID'] = ["TEMP_" + str(i) for i in range(1, missing_ids.sum() + 1)]

# Save to CSV for future use
df.to_csv('cleaned_medical_students.csv', index=False)

import seaborn as sns
sns.histplot(df['Height'], kde=True)  # Check if imputation skewed the data